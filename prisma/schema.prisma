// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  INACTIVE
  ACTIVE
}

enum UserRole {
  ADMIN
  USER
}

enum SchoolType {
  UNIVERSITY
  COLLEGE
  TVET
}

enum LaikipiaConstituency {
  LAIKIPIA_WEST
  LAIKIPIA_EAST
  LAIKIPIA_NORTH
}

enum StudentYear {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
}

model User {
  id                 String               @id @default(cuid())
  name               String
  email              String               @unique
  phone              String               @unique
  schoolType         SchoolType           @default(UNIVERSITY)
  constituency       LaikipiaConstituency @default(LAIKIPIA_EAST)
  registrationNumber String
  year               StudentYear          @default(FIRST)
  school             String
  course             String
  password           String // Renamed to indicate it's hashed
  emailVerified      DateTime?
  status             AccountStatus        @default(INACTIVE)
  role               UserRole             @default(USER)
  announcement       Announcement[]
  messages           Message[]
  updates            Update[]
  activatedBy        String?
  deactivatedBy      String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Announcement {
  announcementId String   @id @default(cuid())
  title          String
  type           String
  content        String
  visibleFrom    DateTime
  visibleTo      DateTime
  createdById    String
  creator        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  createdBy User @relation(fields: [createdById], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  message   String
  sender    String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Update {
  id          String   @id @default(cuid())
  content     String
  isImage     Boolean  @default(false)
  creatorName String
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdAt])
}
